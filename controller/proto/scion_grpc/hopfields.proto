// Copyright 2020 Anapaya Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

//option go_package = "github.com/scionproto/scion/go/pkg/proto/control_plane";

package proto.control_plane.v1;

//import "proto/control_plane/v1/seg.proto";

service HopFieldsRegistrationService {
    // HopFieldsRegistration registers hop fields at the remote service
    rpc HopFieldsRegistration(HopFieldsRegistrationRequest) returns (HopFieldsRegistrationResponse) {}
    // Remove expired hop fields at the remote service
    rpc RemoveExpiredHopFields(RemoveExpiredHopFieldsRequest) returns (RemoveExpiredHopFieldsResponse) {}
}

message HopFieldsRegistrationRequest {
    // Segment creation time set by the originating AS. Segment expiration time
    // is computed relative to this timestamp. The timestamp is encoded as
    // number of seconds elapsed since January 1, 1970 UTC.
    int64 timestamp = 1;
    // The 16-bit segment ID integer used for MAC computation.
    uint32 segment_id = 2;
    // The required regular hop entry.
    HopField hop_field = 3;
    // Optional peer entries.
    repeated HopField peer_hop_fields = 4;    
}

message HopField {
    // Ingress interface identifier.
    uint64 ingress = 1;
    // Egress interface identifier.
    uint64 egress = 2;
    // 8-bit encoded expiration offset relative to the segment creation
    // timestamp.
    uint32 exp_time = 3;
    // MAC used in the dataplane to verify the hop field.
    bytes mac = 4;
}

message HopFieldsRegistrationResponse {}

message RemoveExpiredHopFieldsRequest {}
message RemoveExpiredHopFieldsResponse {}
